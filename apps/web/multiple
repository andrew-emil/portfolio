"use client"

import { Button } from "@/components/ui/button"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "@/lib/utils"
import type { ComponentProps } from "react"

type Props = ComponentProps<typeof Button> & {
  asChild?: boolean
}

export function GlowButton({ className, asChild = false, children, ...props }: Props) {
  const Comp = asChild ? Slot : "span"
  return (
    <Button
      asChild={asChild}
      {...props}
      className={cn(
        "relative overflow-hidden transition-all",
        "bg-purple-600 text-white hover:bg-purple-600",
        "shadow-[0_0_0_rgba(0,0,0,0)] hover:shadow-[0_0_24px_rgba(168,85,247,0.8)]",
        "hover:-translate-y-0.5",
        className,
      )}
    >
      <Comp className="relative z-10">{children}</Comp>
    </Button>
  )
}

import { SiteHeader } from "@/components/site-header"
import { getPortfolioData } from "@/lib/data"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { GlowButton } from "@/components/glow-button"
import Link from "next/link"

export default async function Page() {
  const data = await getPortfolioData()
  const { personalInfo, about, skills } = data

  return (
    <main>
      <SiteHeader />
      <section className="relative">
        <div className="absolute inset-0 -z-10 bg-gradient-to-b from-purple-50 via-background to-background" />
        <div className="container mx-auto grid items-center gap-10 px-4 pb-20 pt-12 md:grid-cols-2">
          <div className="space-y-6">
            <div className="inline-flex items-center gap-2 rounded-full border px-3 py-1 text-xs text-purple-700">
              <span className="h-2 w-2 animate-pulse rounded-full bg-purple-500" />
              Available for internships
            </div>
            <h1 className="text-3xl font-bold sm:text-4xl">
              Hi, I&apos;m{" "}
              <span className="bg-gradient-to-r from-purple-600 via-fuchsia-600 to-purple-600 bg-clip-text text-transparent">
                {personalInfo.name}
              </span>
              <span className="block text-xl text-muted-foreground">{personalInfo.tagline}</span>
            </h1>
            <p className="text-muted-foreground">{about.description}</p>
            <div className="flex gap-3">
              <GlowButton asChild>
                <Link href="/projects">View Projects</Link>
              </GlowButton>
              <Link
                href="/contact"
                className="inline-flex items-center rounded-md border px-4 py-2 text-sm transition hover:shadow-[0_0_24px_rgba(168,85,247,0.25)]"
              >
                Contact Me
              </Link>
            </div>
          </div>
          <div className="relative">
            <img
              src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/profile.jpg-hmGseQFnaS2Ch63oJbAEGvCHgq50vn.jpeg"
              alt="Portrait photo"
              className="mx-auto aspect-[3/4] w-72 rounded-2xl border object-cover shadow-[0_18px_60px_rgba(168,85,247,0.25)]"
            />
            <div className="pointer-events-none absolute -inset-4 -z-10 rounded-3xl bg-gradient-to-tr from-purple-200/40 to-transparent blur-2xl" />
          </div>
        </div>
      </section>

      <section className="container mx-auto px-4 pb-20">
        <h2 className="mb-6 text-2xl font-semibold">{skills.title}</h2>
        <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {skills.categories.map((cat) => (
            <Card
              key={cat.name}
              className="transition hover:-translate-y-0.5 hover:shadow-[0_10px_30px_rgba(168,85,247,0.15)]"
            >
              <CardContent className="space-y-3 p-5">
                <h3 className="font-medium">{cat.name}</h3>
                <div className="flex flex-wrap gap-2">
                  {cat.items.map((item) => (
                    <Badge
                      key={item}
                      variant="secondary"
                      className="border border-purple-200/40 bg-purple-50 text-purple-700"
                    >
                      {item}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>
    </main>
  )
}

import { SiteHeader } from "@/components/site-header"
import { notFound } from "next/navigation"
import { GlowButton } from "@/components/glow-button"
import Link from "next/link"
import { getProjectBySlug } from "@/app/api/projects/helpers"

export default async function ProjectDetails({ params }: { params: { slug: string } }) {
  const project = await getProjectBySlug(params.slug)
  if (!project) notFound()

  return (
    <main>
      <SiteHeader />
      <section className="container mx-auto px-4 py-10">
        <div className="grid gap-8 md:grid-cols-[1.1fr_0.9fr]">
          <div>
            <img
              src={project.thumbnail || "/placeholder.svg"}
              alt={`${project.name} thumbnail`}
              className="aspect-video w-full rounded-xl border object-cover shadow-[0_18px_40px_rgba(168,85,247,0.18)]"
            />
          </div>
          <div className="space-y-4">
            <h1 className="text-3xl font-bold">{project.name}</h1>
            <p className="text-sm text-purple-700">{project.category}</p>
            <p className="text-muted-foreground">{project.description}</p>
            <div className="flex flex-wrap gap-2 pt-2">
              {project.technologies.map((t) => (
                <span
                  key={t}
                  className="rounded-full border border-purple-200/50 bg-purple-50 px-3 py-1 text-xs text-purple-700"
                >
                  {t}
                </span>
              ))}
            </div>
            <div className="flex gap-3 pt-4">
              {project.githubLink ? (
                <GlowButton asChild>
                  <a href={project.githubLink} target="_blank" rel="noopener noreferrer">
                    View Code
                  </a>
                </GlowButton>
              ) : null}
              {project.liveDemoLink ? (
                <a
                  className="inline-flex items-center rounded-md border px-4 py-2 text-sm transition hover:shadow-[0_0_24px_rgba(168,85,247,0.25)]"
                  href={project.liveDemoLink}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Live Demo
                </a>
              ) : null}
              <Link
                href="/projects"
                className="ms-auto text-sm text-muted-foreground underline-offset-4 hover:text-purple-600 hover:underline"
              >
                Back to Projects
              </Link>
            </div>
          </div>
        </div>
      </section>
    </main>
  )
}
